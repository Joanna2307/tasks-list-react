{"version":3,"sources":["GlobalStyle.js","features/tasks/Form/styled.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/Tasks.js","App.js","reportWebVitals.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","store.js","rootSaga.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","_templateObject","_taggedTemplateLiteral","StyledForm","styled","form","Input","input","_templateObject2","Button","button","_templateObject3","_ref","theme","color","white","_ref2","tealButton","tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","state","payload","push","toggleHideDone","toggleTaskDone","taskId","task","find","_ref3","id","done","removeTask","_ref4","index","findIndex","_ref5","splice","setAllDone","map","_objectSpread","fetchExampleTasks","setTasks","_ref6","actions","selectTasks","Form","newTaskContent","setNewTaskContent","useState","inputRef","useRef","dispatch","useDispatch","React","createElement","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","current","focus","ref","value","placeholder","onChange","target","List","ul","ListItem","li","$hidden","remove","$remove","TasksContainer","div","_templateObject4","_ref7","$done","TaskList","useSelector","key","onClick","Wrapper","TasksButtons","teal","tealActive","gray","Buttons","length","Fragment","disabled","every","StyledSection","section","Header","h2","SectionDiv","Section","title","body","extraHeaderContent","Main","Container","children","Tasks","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","getExampleTasks","async","response","fetch","ok","Error","statusText","json","fetchExampleTasksHandler","exampleTasks","call","put","error","alert","watchFetchExampleTasks","console","log","takeEvery","type","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","getDefaultMiddleware","concat","run","all","ReactDOM","createRoot","document","getElementById","render","StrictMode","Provider","ThemeProvider","grey"],"mappings":"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","file":"static/js/main.96c93f30.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n    box-sizing: border-box;\n  }\n  *,\n  ::after,\n  ::before {\n    box-sizing: inherit;\n  }\n\n  body {\n    font-family: \"Montserrat\", sans-serif;\n    background-color: #eee;\n    word-break: break-all;\n  }\n`;\n","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  grid-gap: 20px;\r\n  margin: 10px;\r\n\r\n  @media (max-width: 767px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  padding: 10px;\r\n  height: 40px;\r\n  box-sizing: border-box;\r\n  font-size: 16px;\r\n\r\n  &:active {\r\n    border: black;\r\n  }\r\n\r\n  @media (max-width: 767px) {\r\n    height: 40px;\r\n    font-size: 16px;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  padding: 10px;\r\n  color: ${({ theme }) => theme.color.white};\r\n  background-color: rgb(2, 128, 128);\r\n  border: none;\r\n  transition: transform 0.25s linear, background 0.75s linear;\r\n  height: 40px;\r\n  font-size: 16px;\r\n  box-sizing: border-box;\r\n\r\n  &:hover {\r\n    background-color: rgb(32, 160, 160);\r\n    transform: scale(1.025);\r\n    cursor: pointer;\r\n  }\r\n\r\n  &:active {\r\n    outline: 1px solid teal;\r\n    color: ${({ theme }) => theme.color.tealButton};\r\n    transform: scale(1);\r\n  }\r\n\r\n  @media (max-width: 767px) {\r\n    height: 40px;\r\n    font-size: 16px;\r\n  }\r\n`;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst tasksSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: {\r\n    tasks: [],\r\n    hideDone: false,\r\n  },\r\n  reducers: {\r\n    addTask: (state, { payload }) => {\r\n      state.tasks.push(payload);\r\n    },\r\n    toggleHideDone: (state) => {\r\n      state.hideDone = !state.hideDone;\r\n    },\r\n    toggleTaskDone: (state, { payload: taskId }) => {\r\n      const task = state.tasks.find(({ id }) => id === taskId);\r\n      if (task) {\r\n        task.done = !task.done;\r\n      }\r\n    },\r\n    removeTask: (state, { payload: taskId }) => {\r\n      const index = state.tasks.findIndex(({ id }) => id === taskId);\r\n      if (index !== -1) {\r\n        state.tasks.splice(index, 1);\r\n      }\r\n    },\r\n    setAllDone: (state) => {\r\n      state.tasks = state.tasks.map((task) => ({ ...task, done: true }));\r\n    },\r\n\r\n    fetchExampleTasks: () => {},\r\n    setTasks: (state, { payload: tasks }) => {\r\n      state.tasks = tasks;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  addTask,\r\n  toggleHideDone,\r\n  toggleTaskDone,\r\n  removeTask,\r\n  setAllDone,\r\n  fetchExampleTasks,\r\n  setTasks,\r\n} = tasksSlice.actions;\r\nexport const selectTasks = (state) => state.tasks;\r\nexport default tasksSlice.reducer;\r\n","import React, { useRef, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { StyledForm, Input, Button } from \"./styled\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\n\r\nconst Form = () => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n  const focusInput = () => {\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    const trimmedNewTaskContent = newTaskContent.trim();\r\n    if (trimmedNewTaskContent === \"\") {\r\n      return;\r\n    }\r\n\r\n    dispatch(\r\n      addTask({\r\n        content: trimmedNewTaskContent,\r\n        done: false,\r\n        id: nanoid(),\r\n      })\r\n    );\r\n\r\n    setNewTaskContent(\"\");\r\n    focusInput();\r\n  };\r\n\r\n  return (\r\n    <StyledForm onSubmit={onFormSubmit}>\r\n      <Input\r\n        ref={inputRef}\r\n        value={newTaskContent}\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        onChange={({ target }) => setNewTaskContent(target.value)}\r\n      />\r\n      <Button>Dodaj zadanie</Button>\r\n    </StyledForm>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import styled from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n  padding: 0;\r\n  margin: 0;\r\n  list-style: none;\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\n  display: grid;\r\n  grid-template-columns: auto 1fr auto;\r\n  align-items: center;\r\n  gap: 15px;\r\n  border-bottom: 1px solid #ddd;\r\n  padding: 10px;\r\n\r\n  ${({ $hidden }) => $hidden && `display: none;`}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  background-color: ${({ remove }) => (remove ? \"rgb(239, 24, 42)\" : \"green\")};\r\n  border: none;\r\n  color: ${({ theme }) => theme.color.white};\r\n  width: 30px;\r\n  height: 30px;\r\n  margin: 10px;\r\n  transition: background 0.2s;\r\n\r\n  &:hover {\r\n    background-color: ${({ $remove }) =>\r\n      $remove ? \"rgb(255, 80, 80)\" : \"rgb(80, 225, 85)\"};\r\n    cursor: pointer;\r\n  }\r\n\r\n  &:active {\r\n    background-color: ${({ $remove }) =>\r\n      $remove ? \"rgb(239, 24, 42)\" : \"rgb(53, 190, 50)\"};\r\n  }\r\n\r\n  ${({ $remove }) =>\r\n    $remove &&\r\n    `\r\n      background-color: rgb(251, 6, 6);\r\n      margin-left: 10px;\r\n\r\n      &:hover {\r\n        background-color: rgb(255, 80, 80);\r\n      }\r\n\r\n      &:active {\r\n        background-color: rgb(239, 24, 42);\r\n      }\r\n    `}\r\n`;\r\n\r\nexport const TasksContainer = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  align-items: center;\r\n  margin: 20px 0;\r\n  padding: 10px;\r\n  background-color: white;\r\n\r\n  ${({ $done }) =>\r\n    $done &&\r\n    `\r\n      text-decoration: line-through;\r\n      color: gray;\r\n    `}\r\n`;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { List, ListItem, Button, TasksContainer } from \"./styled\";\r\nimport { selectTasks, removeTask, toggleTaskDone } from \"../tasksSlice\";\r\n\r\nconst TaskList = () => {\r\n  const { tasks, hideDone } = useSelector(selectTasks);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <List>\r\n      {tasks.map((task) => (\r\n        <ListItem key={task.id} $hidden={hideDone && task.done}>\r\n          <Button onClick={() => dispatch(toggleTaskDone(task.id))}>\r\n            {task.done ? \"✔\" : \"\"}\r\n          </Button>\r\n          <TasksContainer $done={task.done}>{task.content}</TasksContainer>\r\n          <Button $remove onClick={() => dispatch(removeTask(task.id))}>\r\n            🗑\r\n          </Button>\r\n        </ListItem>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  text-align: right;\r\n  font-size: 18px;\r\n`;\r\nexport const Button = styled.button`\r\n  background-color: rgb(61, 189, 65);\r\n  border: none;\r\n  color:  ${({ theme }) => theme.color.white};\r\n  width: 30px;\r\n  height: 30px;\r\n  margin: 10px;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: rgb(80, 225, 85);\r\n    cursor: pointer;\r\n  }\r\n\r\n  &:active {\r\n    background-color: rgb(53, 190, 50);\r\n  }\r\n`;\r\n\r\nexport const ButtonRemove = styled(Button)`\r\n  background-color: rgb(251, 6, 6);\r\n  margin-left: 150 px;\r\n\r\n  &:hover {\r\n    background-color: rgb(255, 80, 80);\r\n  }\r\n\r\n  &:active {\r\n    background-color: rgb(239, 24, 42);\r\n  }\r\n`;\r\n\r\nexport const TasksButtons = styled.button`\r\n  color: ${({ theme }) => theme.color.teal};\r\n  background-color: transparent;\r\n  border: none;\r\n\r\n  &:active {\r\n    color: ${({ theme }) => theme.color.tealActive};\r\n  }\r\n  &:disabled {\r\n    color: ${({ theme }) => theme.color.gray};\r\n    cursor: not-allowed;\r\n  }\r\n\r\n  @media (max-width: 767px) {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 10px;\r\n    align-items: center;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Wrapper, TasksButtons } from \"./styled\";\r\nimport {\r\n  selectTasks,\r\n  toggleHideDone,\r\n  setAllDone,\r\n  fetchExampleTasks,\r\n} from \"../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n  const { tasks, hideDone } = useSelector(selectTasks);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Wrapper>\r\n      <TasksButtons onClick={() => dispatch(fetchExampleTasks())}>\r\n        Pobierz przykładowe zadania\r\n      </TasksButtons>\r\n\r\n      {tasks.length > 0 && (\r\n        <>\r\n          <TasksButtons onClick={() => dispatch(toggleHideDone())}>\r\n            {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n          </TasksButtons>\r\n          <TasksButtons\r\n            disabled={tasks.every(({ done }) => done)}\r\n            onClick={() => dispatch(setAllDone())}\r\n          >\r\n            Ukończ wszystkie\r\n          </TasksButtons>\r\n        </>\r\n      )}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n  margin: 15px 0;\r\n  background-color: white;\r\n`;\r\n\r\nexport const Header = styled.h2`\r\n  margin: 0;\r\n  padding: 20px;\r\n  border-bottom: 1px solid #ddd;\r\n  display: grid;\r\n  grid-template-columns: 1fr auto auto;\r\n\r\n  @media (max-width: 767px) {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 10px;\r\n  }\r\n`;\r\n\r\nexport const SectionDiv = styled.div`\r\n  padding: 15px;\r\n\r\n  @media (max-width: 767px) {\r\n    padding: 20px 15px;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { StyledSection, Header, SectionDiv } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <StyledSection>\r\n    <Header>\r\n      {title}\r\n      {extraHeaderContent}\r\n    </Header>\r\n    <SectionDiv>{body}</SectionDiv>\r\n  </StyledSection>\r\n);\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\n\r\nconst Header = ({ title }) => (\r\n  <header>\r\n    <h1>{title}</h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Main = styled.div`\r\n  max-width: 900px;\r\n  padding: 20px;\r\n  margin: 0 auto;\r\n  font-size: 14px;\r\n\r\n  @media (max-width: 768px) {\r\n    padding: 15px;\r\n    font-size: 12px;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { Main } from \"./styled\";\r\n\r\nconst Container = ({ children }) => <Main>{children}</Main>;\r\nexport default Container;\r\n","import React from \"react\";\nimport Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../common/Section\";\nimport Header from \"../../common/Header\";\nimport Container from \"../../common/Container\";\n\nfunction Tasks() {\n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n\n      <Section title=\"Dodaj nowe zadanie\" body={<Form />} />\n\n      <Section\n        title=\"Lista zadań\"\n        body={<TaskList />}\n        extraHeaderContent={<Buttons />}\n      />\n    </Container>\n  );\n}\n\nexport default Tasks;\n","import React from \"react\";\r\nimport Tasks from \"./features/tasks/Tasks\";\r\n\r\nconst App = () => <Tasks />;\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const getExampleTasks = async () => {\r\n  const response = await fetch(\"/tasks-list-react/exampleTasks.json\");\r\n\r\n  if (!response.ok) {\r\n    new Error(response.statusText);\r\n  }\r\n  return await response.json();\r\n};\r\n","import { takeEvery, call, put } from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { fetchExampleTasks, setTasks } from \"./tasksSlice\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n  try {\r\n    const exampleTasks = yield call(getExampleTasks);\r\n    yield put(setTasks(exampleTasks));\r\n  } catch (error) {\r\n    yield call(alert, \"Coś poszło nie tak!\");\r\n  }\r\n}\r\n\r\nexport function* watchFetchExampleTasks() {\r\n  console.log(\"Saga działa!\");\r\n  yield takeEvery(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n}\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\n\r\nimport rootSaga from \"./rootSaga\";\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    tasks: tasksReducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().concat(sagaMiddleware),\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","import { all } from \"redux-saga/effects\";\r\nimport { watchFetchExampleTasks } from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n  yield all([watchFetchExampleTasks()]);\r\n}\r\n","import React from \"react\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport ReactDOM from \"react-dom/client\";\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from \"react-redux\";\nimport { theme } from \"./theme\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./store\";\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    color: {\r\n      white: \"#FFFFFF\",\r\nteal: \"#038282\",\r\ntealActive: \"#94b9e9\",\r\ngrey: \"#808080\",\r\ntealButton: \"#016060\"\r\n    },\r\n  };\r\n  "],"sourceRoot":""}